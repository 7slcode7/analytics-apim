/* Enter a unique ExecutionPlan */


                      @Plan:name('APIMAnalytics-AbnormalRequestCountDetection')

                                /* Enter a unique description for ExecutionPlan */
                                -- @Plan:description('ExecutionPlan')

                                /* define streams/tables and write queries here ... */


                                @Import('org.wso2.apimgt.statistics.request:1.1.0')
                                define stream requestStream (meta_clientType string, consumerKey string, context string, api_version string, api string, resourcePath string, resourceTemplate string, method string, version string, request int, requestTime long, userId string, tenantDomain string, hostName string, apiPublisher string, applicationName string, applicationId string, userAgent string, tier string, throttledOut bool, clientIp string, applicationOwner string);


                                @Import('org.wso2.analytics.apim.requestStatStream:1.0.0')
                                define stream requestStatStream (api_version string, userId string, consumerKey string, resourceTemplate string, method string, avgRequestsPerMin double, sdRequestsPerMin double);

                              	
							  	@Export('org.wso2.analytics.apim.allApimAlertsStream:1.0.0')
								define stream allApimAlertStream (type string, tenantDomain string, msg string, alertTimestamp long);

								
								@Export('org.wso2.analytics.apim.abnormalRequestsPerMinAlertStream:1.0.0')
								define stream abnormalRequestsPerMinAlertStream (api string, userId string, tenantDomain string, applicationName string, applicationOwner string, resourceTemplate string, method string, requestsPerMin long, requestsPerMinUpperPercentile double, requestsPerMinLowerPercentile double, reason string, msg string, severity int, alertTimestamp long);

 								
								@Export('org.wso2.analytics.apim.requestPerMinStream:1.0.0')
								define stream requestPerMinStream (api_version string, userId string, consumerKey string, resourceTemplate string, method string, requestsPerMin long);

                                @from(eventtable = 'analytics.table' , table.name = 'ORG_WSO2_ANALYTICS_APIM_REQUESTPERCENTILE',  primary.keys = 'api_version,userId,consumerKey,resourceTemplate,method')
                                define table requestPercentileTable (api_version string, userId string, consumerKey string, resourceTemplate string, method string, requestsPerMinUpperPercentile double, requestsPerMinLowerPercentile double);
								
								

                                @info(name = 'query1')
                                from requestStream
                                select api_version, userId, tenantDomain, consumerKey, applicationName, applicationOwner, resourceTemplate, method
                                insert into requestSummaryStream ;

                                @info(name = 'query2')
                                from requestSummaryStream#window.timeBatch(10 sec)
                                select api_version, userId , consumerKey, resourceTemplate, method, count() as requestsPerMin
                                group by api_version, userId , consumerKey, resourceTemplate, method
                                insert into requestPerMinStream ;

                                /* events of the stream requestPerMinStream are persisted. Spark script uses these persisted data to calculate percentiles*/

                                @info(name = 'query3')
                                from requestSummaryStream#window.time(10 sec)
                                select  api_version, userId , tenantDomain, consumerKey, applicationName, applicationOwner, resourceTemplate, method, count() as  requestsPerMin
                                group by api_version, userId ,consumerKey, resourceTemplate, method
                                insert into requestCountStream;

                                /* retrieving corresponding percentile values from table and filtering abnormal counts*/
                                @info(name = 'query4')
                                from requestCountStream join requestPercentileTable
                                on (requestCountStream.api_version ==requestPercentileTable.api_version and  requestCountStream.userId ==requestPercentileTable.userId  and
                                  requestCountStream.consumerKey ==requestPercentileTable.consumerKey and requestCountStream.resourceTemplate ==requestPercentileTable.resourceTemplate and requestCountStream.method ==requestPercentileTable.method)
                                select requestCountStream.api_version as api , requestCountStream.userId , requestCountStream.tenantDomain, requestCountStream.applicationName, requestCountStream.applicationOwner, requestCountStream.resourceTemplate, requestCountStream.method, requestCountStream.requestsPerMin,  requestPercentileTable.requestsPerMinUpperPercentile,   requestPercentileTable.requestsPerMinLowerPercentile, ifThenElse(requestsPerMin > requestsPerMinUpperPercentile,'spike','drop') as reason,
                                str:concat('Abnormal request count ' , ifThenElse(requestsPerMin > requestsPerMinUpperPercentile,'spike','drop') , ' detected during last minute by userId:',requestCountStream.userId,' using application ',requestCountStream.applicationName,' owned by ',requestCountStream.applicationOwner,' for http ',requestCountStream.method,' method of resource template ',requestCountStream.resourceTemplate,' in api :',requestCountStream.api_version,', abnormal request count:',requestCountStream.requestsPerMin, ".") as msg ,2 as severity, (time:timestampInMilliseconds()) as alertTimestamp
                                having (requestsPerMin > requestsPerMinUpperPercentile or requestsPerMin < requestsPerMinLowerPercentile)
                                insert into abnormalRequestsPerMinAlertStream;

                                @info(name = 'query5')
                                from abnormalRequestsPerMinAlertStream
                                select 'abnormalRequestsPerMin' as type, tenantDomain, msg,(time:timestampInMilliseconds()) as alertTimestamp
                                insert into allApimAlertStream;