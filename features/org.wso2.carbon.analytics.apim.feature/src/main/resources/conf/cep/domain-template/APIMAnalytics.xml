<?xml version="1.0" encoding="UTF-8"?>

<templateDomain name="APIMAnalytics">
    <description>Alerting anomalies</description>
    <templates>
        <template name="Response Anomaly Detector">
            <description>Abnormal response time and backend time alerting</description>
            <executionPlan><![CDATA[
                                /* Enter a unique ExecutionPlan */
                                @Plan:name('APIResponseExecutionPlan')

                                /* Enter a unique description for ExecutionPlan */
                                -- @Plan:description('ExecutionPlan')

                                /* define streams/tables and write queries here ... */


                                @Import('org.wso2.apimgt.statistics.response:1.0.0')
                                define stream responseStream (meta_clientType string, consumerKey string, context string, api_version string, api string, resourcePath string, method string, version string, response int, responseTime long, serviceTime long, backendTime long, username string, eventTime long, tenantDomain string, hostName string, apiPublisher string, applicationName string, applicationId string, cacheHit bool, responseSize long, protocol string);

                                @Import('org.wso2.analytics.apim.responseStatStream:1.0.0')
                                define stream responseStatStream (api_version string, tenantDomain string, avgResponseTime double, sdResponseTime double, avgBackendTime double, sdBackendTime double);


                                @Export('org.wso2.analytics.apim.abnormalBackendTimeAlertStream:1.0.0')
                                define stream abnormalBackendTimeAlertStream (api string, tenantDomain string, backendTime long, backendPercentile double);

                                @Export('org.wso2.analytics.apim.abnormalResponseTimeAlertStream:1.0.0')
                                define stream abnormalResponseTimeAlertStream (api string, tenantDomain string, responseTime long, responsePercentile double);


                                @from(eventtable = 'analytics.table' , table.name = 'RESPONSE_PERCENTILE_TABLE',  primary.keys = 'api_version,tenantDomain')
                                define table percentileTable (api_version string, tenantDomain string, responsePercentile double, backendPercentile double );


                                @info(name = 'query1') 
                                from responseStream
                                select api_version, tenantDomain, responseTime, backendTime 
                                insert into responseSummaryStream; 

                                @info(name = 'query2') 
                                from responseStatStream 
                                select api_version , tenantDomain,  analytics:percentile(avgResponseTime, sdResponseTime, $responseTimePercentile) as responsePercentile , analytics:percentile(avgBackendTime, sdBackendTime, $backendTimePercentile) as backendPercentile  
                                insert into percentileTable  ;

                                @info(name = 'query3') 
                                from responseSummaryStream join percentileTable 
                                on (responseSummaryStream.api_version==percentileTable.api_version and responseSummaryStream.tenantDomain==percentileTable.tenantDomain )
                                select responseSummaryStream.api_version, responseSummaryStream.tenantDomain, responseSummaryStream.responseTime, percentileTable.responsePercentile , responseSummaryStream.backendTime,  percentileTable.backendPercentile                  
                                insert into responseInfoStream;

                                @info(name = 'query4')
                                from responseInfoStream[responseTime > responsePercentile] 
                                select api_version as api, tenantDomain, responseTime, responsePercentile 
                                insert into abnormalResponseTimeAlertStream;

                                @info(name = 'query5') 
                                from responseInfoStream[backendTime > backendPercentile]
                                select api_version as api, tenantDomain, backendTime, backendPercentile  
                                insert into abnormalBackendTimeAlertStream;                    
                                 ]]></executionPlan>
            <parameters>
                <parameter name="responseTimePercentile" type="int">
                    <displayName>Response Time Percentile</displayName>
                    <description>Alert if the responseTime lies outside the given percentile value</description>
                    <defaultValue>95</defaultValue>
                </parameter>
                <parameter name="backendTimePercentile" type="int">
                    <displayName>Backend Time Percentile</displayName>
                    <description>Alert if the backendTime lies outside the given percentile value</description>
                    <defaultValue>95</defaultValue>
                </parameter>
            </parameters>
        </template>
        <template name="Request Anomaly Detector">
            <description>Abnormal request count alerting</description>
            <executionPlan><![CDATA[
                                /* Enter a unique ExecutionPlan */
                                @Plan:name('APIRequestExecutionPlan')

                                /* Enter a unique description for ExecutionPlan */
                                -- @Plan:description('ExecutionPlan')

                                /* define streams/tables and write queries here ... */


                                @Import('org.wso2.apimgt.statistics.request:1.0.0')
                                define stream requestStream (meta_clientType string, consumerKey string, context string, api_version string, api string, resourcePath string, method string, version string, request int, requestTime long, userId string, tenantDomain string, hostName string, apiPublisher string, applicationName string, applicationId string, userAgent string, tier string, throttledOut bool);


                                @Import('org.wso2.analytics.apim.requestStatStream:1.0.0')
                                define stream requestStatStream (api_version string, userId string, consumerKey string, avgRequestsPerMin double, sdRequestsPerMin double);

                                @Export('org.wso2.analytics.apim.abnormalRequestsPerMinAlertStream:1.0.0')
                                define stream abnormalRequestsPerMinAlertStream (api string, userId string, consumerKey string,  requestsPerMin long, requestsPerMinUpperPercentile double ,requestsPerMinLowerPercentile double);

                                @Export('org.wso2.analytics.apim.requestPerMinStream:1.0.0')
                                define stream requestPerMinStream (api_version string, userId string, consumerKey string, requestsPerMin long);

                                @from(eventtable = 'analytics.table' , table.name = 'REQUEST_PERCENTILE_TABLE',  primary.keys = 'api_version,userId,consumerKey')
                                define table requestPercentileTable (api_version string, userId string, consumerKey string,  requestsPerMinUpperPercentile double, requestsPerMinLowerPercentile double);

                                @info(name = 'query1')
                                from requestStream
                                select api_version, userId, consumerKey
                                insert into requestSummaryStream ;


                                @info(name = 'query2')
                                from requestSummaryStream#window.timeBatch(1 minute)
                                select api_version, userId , consumerKey,  count() as requestsPerMin
                                group by api_version, userId , consumerKey
                                insert into requestPerMinStream ;

                                @info(name = 'query3')
                                from requestStatStream
                                select api_version, userId , consumerKey, analytics:percentile(avgRequestsPerMin, sdRequestsPerMin, $requestsPerMinuteUpperPercentile) as requestsPerMinUpperPercentile,  analytics:percentile(avgRequestsPerMin, sdRequestsPerMin, $requestsPerMinuteLowerPercentile) as requestsPerMinLowerPercentile
                                insert into requestPercentileTable;


                                @info(name = 'query4')
                                from requestSummaryStream#window.time(1 min)
                                select  api_version, userId ,consumerKey,   count() as  requestsPerMin
                                group by api_version, userId ,consumerKey
                                insert into requestCountStream;

                                @info(name = 'query5')
                                from requestCountStream join requestPercentileTable
                                on (requestCountStream.api_version ==requestPercentileTable.api_version and  requestCountStream.userId ==requestPercentileTable.userId  and
                                  requestCountStream.consumerKey ==requestPercentileTable.consumerKey)
                                select requestCountStream.api_version as api , requestCountStream.userId , requestCountStream.consumerKey,requestCountStream.requestsPerMin,  requestPercentileTable.requestsPerMinUpperPercentile,   requestPercentileTable.requestsPerMinLowerPercentile
                                having (requestsPerMin > requestsPerMinUpperPercentile or requestsPerMin < requestsPerMinLowerPercentile)
                                insert into abnormalRequestsPerMinAlertStream;
                                 ]]></executionPlan>
            <parameters>
                <parameter name="requestsPerMinuteUpperPercentile" type="int">
                    <displayName>percentile upper bound</displayName>
                    <description>Alert if the request count per minute lies outside the given percentile value</description>
                    <defaultValue>95</defaultValue>
                </parameter>
                <parameter name="requestsPerMinuteLowerPercentile" type="int">
                    <displayName>percentile lower bound</displayName>
                    <description>Alert if the request count per minute lies within the given percentile value</description>
                    <defaultValue>5</defaultValue>
                </parameter>
            </parameters>
        </template>
    </templates>
    <streams/>
</templateDomain>
