<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    <ModulePrefs title="Empty" description="g1" height="30">
        <Require feature="pubsub-2"/>
        <Require feature="dynamic-height"/>
    </ModulePrefs>
    <Content type="html">
        <![CDATA[
        <head>
          <script src="js/jquery-1.10.2.js"></script> 
          <script language="javascript" type="text/javascript" src="js/outputAdapterUiLibrary.js"></script>

          <link rel="stylesheet" type="text/css" href="/portal/libs/bootstrap_3.3.5/css/bootstrap.min.css" />
          <link rel="stylesheet" type="text/css" href="css/font-wso2.min.css" />
          <link rel="stylesheet" type="text/css" href="/portal/libs/theme-wso2_1.0/css/theme-wso2.css" />
          <link rel="stylesheet" type="text/css" href="css/custom.css" />

          <!-- Custom JS -->
          <script src="js/main.js"></script>

          <script>

                    var stream = "org.wso2.analytics.apim.abnormalResponseTimeAlertStream";
                    var version = "1.0.0";


                    subscribe(stream, version, "10", "carbon.super",
                    onRealTimeEventSuccessRecieval, onRealTimeEventErrorRecieval, location.hostname, location.port,'WEBSOCKET', "SECURED");


                    var queue = new Queue();
   
                    function onRealTimeEventSuccessRecieval(streamId, data) {
                        var item;
                        queue = getAlerts(data,queue);
                        display(queue);

                    };


                    function onRealTimeEventErrorRecieval(dataError) {
                        console.log("Error occurred " + dataError);
                    };


                    function getAlerts(data,queue){

                        if(queue.getLength()<10){
                            console.log(data[0][1]);
                            queue.enqueue(data[0][7]+","+data[0][8]);

                        }else if(queue.getLength()==10){
                            console.log("entering else");
                            var i = queue.remove();
                            console.log("Removed item :" + i);
                            console.log(queue.getLength());
                            queue.enqueue(data[0][7]+","+data[0][8]);
                            console.log(data);

                        }
                            return queue;

                    }

                   function display(queue){

                            var div = document.getElementById("placeholder");
                             div.innerHTML = ""; 


                            var currentClass = div.className;
                            console.log(currentClass);
                            
                            var set = queue.getInverse();

                            var test = document.createElement('div');
            

                            for(i=set.length-1; i>=0; i--){ 

                                var splittedRecord = set[i].split(',');
                                var timestamp = splittedRecord[1];
                                var date = new Date(parseFloat(timestamp));
                                console.log(date);
                                var convertedTimestamp = date.toString("dd/MM/yyyy HH:mm:ss");

                                $('#placeholder').append('<li id="alert'+i+'" class="api-message api-message-success"><h5><i class="icon fw fw-warning"></i>'+splittedRecord[0]+'</h5><span class="time">'+convertedTimestamp+'</span></li>');             
                            
                                   
                            }
                   }

                    function Queue(){

                          // initialize the queue and offset
                          var queue  = [];
                          var offset = 0;
                          

                          // Returns the length of the queue.
                          this.getLength = function(){
                            return (queue.length - offset);
                          }

                          // Returns true if the queue is empty, and false otherwise.
                          this.isEmpty = function(){
                            return (queue.length == 0);
                          }

                          /* Enqueues the specified item. The parameter is:
                           *
                           * item - the item to enqueue
                           */
                          this.enqueue = function(item){
                            queue.push(item);
                          }

                    
                          /* Get all the available elements in queue (ascending order)
                           */
                          this.getAll = function(){
                            var arr=[];
                            for(i=0;i<queue.length;i++){
                                arr[i]=queue[i];
                            }
                            return arr;
                          }

                          this.getInverse=function(){
                            var arr=[];
                            for(i=queue.length-1;i>=0;i--){
                                console.log("item in queue :" + queue[i] )
                                arr[i]=queue[i];

                            }
                            return arr;
                          }

                          /* Dequeues an item and returns it. 
                           */
                          this.remove=function(){
                          var i = queue.shift();
                          return i;
                          }

                          /* Returns the item at the front of the queue (without dequeuing it). If the
                           * queue is empty then undefined is returned.
                           */
                          this.peek = function(){
                            return (queue.length > 0 ? queue[offset] : undefined);
                          }

                        }
                </script>

        </head>
        <body>
            
            
                <ul class="alerts-list">
                    <div id="placeholder"></div>
                </ul>
            
        </body>
        ]]>
    </Content>
</Module>
