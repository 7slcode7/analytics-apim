@Plan:name('APIMAnalytics-APIRequestPatternChangeAnalysisMetric')


@Import('org.wso2.analytics.apim.transitionStream:1.0.0')
define stream metricStream (startState string, endState string, consumerKey string, applicationName string, applicationOwner string, userid string, requestTimestamp string);

@Export('org.wso2.analytics.apim.requestPatternChangedStream:1.0.0')
define stream requestPatternChangedStream (userid string, applicationName string, applicationOwner string, msg string, alertTimestamp long);

@Export('org.wso2.analytics.apim.allApimAlertsStream:1.0.0')
define stream all_apim_alerts_stream (type string, msg string, alertTimestamp long);


@from(eventtable = 'analytics.table' , table.name = 'org_wso2_analytics_apim_MARKOVMODELTABLE', primary.keys='startState,endState, consumerKey', indices = 'startState,endState, count, probability, consumerKey')
define table MarkovModelTable (consumerKey string, startState string, endState string, count double, probability double);

@from(eventtable = 'analytics.table' , table.name = 'org_wso2_analytics_apim_REQUESTCOUNTTABLE', primary.keys='consumerKey', indices = 'consumerKey,count')
define table RequestCountPerConsumerKeyTable(consumerKey string, count int);

/****************************************************** Calculate Miss Probability *******************************************************************************/
from metricStream[not((startState == MarkovModelTable.startState and endState == MarkovModelTable.endState and consumerKey == MarkovModelTable.consumerKey) in MarkovModelTable)]
select userid, requestTimestamp, startState , endState, 1.0 as MissProbability, MarkovModelTable.consumerKey, applicationName, applicationOwner
insert into metricValueStreamTemp;

from metricStream as ms join MarkovModelTable
on (ms.startState == MarkovModelTable.startState and ms.endState == MarkovModelTable.endState and ms.consumerKey == MarkovModelTable.consumerKey)
select ms.userid, ms.requestTimestamp, ms.startState ,ms.endState, (1- MarkovModelTable.probability) as MissProbability, MarkovModelTable.consumerKey,  ms.applicationName, ms.applicationOwner
insert into metricValueStreamTemp;
 
/****************************************************** fetch request count for consumerkey *******************************************************************************/

from metricValueStreamTemp as m join RequestCountPerConsumerKeyTable
on (consumerKey == RequestCountPerConsumerKeyTable.consumerKey)
select userid, requestTimestamp, startState, endState, MissProbability, m.consumerKey, m.applicationName, m.applicationOwner ,   count
insert into metricValueStream;

/****************************************************** Normalize Miss Probability ******************************************************************************/
from metricValueStream#window.length(1)
select userid, requestTimestamp, startState, endState, avg (MissProbability) as NormalizeMissProbability, consumerKey, applicationName, applicationOwner, count
insert into NormalizeMissProbabilityStream;

/****************************************************** Compare Normalize Miss Probability with Threshold *******************************************************/
from NormalizeMissProbabilityStream [ NormalizeMissProbability > 0.95 and count >= 500]
select userid, requestTimestamp, str:concat(startState,' to ',endState) as transition, NormalizeMissProbability as miss_probability, consumerKey, applicationName, applicationOwner
insert into IntermediateFraudStream;

from IntermediateFraudStream 
select userid, applicationName, applicationOwner, str:concat('Abnormal request pattern detected by user :',userid,' using application : ',applicationName, ' owned by Owner: ',applicationOwner, ' suscpicious API transition is: ',transition) as msg , (time:timestampInMilliseconds()) as alertTimestamp
insert into requestPatternChangedStream;

from IntermediateFraudStream
select 'RequestPatternChanged' as type, str:concat('Abnormal request pattern detected by user :',userid,' using application :',applicationName,' owned by Owner :',applicationOwner, ' suscpicious API transition is: ',transition) as msg, (time:timestampInMilliseconds()) as alertTimestamp
insert into all_apim_alerts_stream;