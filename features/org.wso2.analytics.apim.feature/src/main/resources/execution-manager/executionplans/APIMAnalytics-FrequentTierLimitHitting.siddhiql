/* Enter a unique ExecutionPlan */
@Plan:name('APIMAnalytics-FrequentTierLimitHitting')

@Import('org.wso2.apimgt.statistics.throttle:1.0.0')
define stream throttleStream (meta_clientType string, accessToken string, userId string, tenantDomain string, api string, api_version string, context string, apiPublisher string, throttledTime long, applicationName string, applicationId string, throttledOutReason string);


@Export('org.wso2.analytics.apim.allApimAlertsStream:1.0.0')
define stream allAlertsStream (type string, msg string, alertTimestamp long);

@Export('org.wso2.analytics.apim.tierLimitHittingAlert:1.0.0')
define stream tierLimitHittingAlertStream (apiPublisher string, api string, applicationId string, applicationName string, tenantDomain string, msg string, alertTimestamp long);

/* read data to a temporary stream*/
@info(name = 'query1')
from throttleStream[throttledOutReason == 'Application throttling reached']#window.time( 1 day )
select apiPublisher, api, api_version, applicationId, applicationName, tenantDomain, count(userId) as numHits
group by apiPublisher, api_version, applicationId
having numHits > 10
insert into temporarySubscriberStream;

@info(name = 'query2')
from throttleStream[throttledOutReason == 'User throttling reached']#window.time( 1 day )
select userId, apiPublisher, api, api_version, applicationId, applicationName, tenantDomain, count(userId) as numHits
group by userId, api_version, applicationId
having numHits > 10
insert into temporaryUserStream;

/* TODO: current throttling stream doesn't have apiSubscriber, once it is
     available we have to update following query*/

/* send to the alert stream specific to this scenario */
@info(name = 'query3')
from temporarySubscriberStream
select apiPublisher, api, applicationId, applicationName, tenantDomain, str:concat("The application ", applicationName, " owned by ", apiPublisher, " frequently goes beyond the allocated quota when accessing the ", api_version," API.") as msg, (time:timestampInMilliseconds()) as alertTimestamp
insert into tierLimitHittingAlertStream;

@info(name = 'query4')
from temporaryUserStream
select apiPublisher, api, applicationId, applicationName, tenantDomain, str:concat("User ", userId, " using the ", applicationName, " application owned by ", apiPublisher, " frequently crosses the limit set for the user.") as msg, (time:timestampInMilliseconds()) as alertTimestamp
insert into tierLimitHittingAlertStream;

/* send to general alert stream */
@info(name = 'query5')
from temporarySubscriberStream
select "FrequentTierHittingAlert" as type, str:concat("The application ", applicationName, " owned by ", apiPublisher, " frequently goes beyond the allocated quota when accessing the ", api_version," API.") as msg, (time:timestampInMilliseconds()) as alertTimestamp
insert into allAlertsStream;

@info(name = 'query6')
from temporaryUserStream
select "FrequentTierHittingAlert" as type, str:concat("User ", userId, " using the ", applicationName, " application owned by ", apiPublisher, " frequently crosses the limit set for the user.") as msg, (time:timestampInMilliseconds()) as alertTimestamp
insert into allAlertsStream;
