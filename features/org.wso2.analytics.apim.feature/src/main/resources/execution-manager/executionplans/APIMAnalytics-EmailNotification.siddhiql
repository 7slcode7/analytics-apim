/* Enter a unique ExecutionPlan */
@Plan:name('APIMAnalytics-EmailNotification')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Import('org.wso2.analytics.apim.allApimAlertsStream:1.0.0')
define stream allAlertStream (type string, tenantDomain string, msg string, severity int, alertTimestamp long);

@Import('org.wso2.analytics.apim.apiHealthMonitorAlertStream:1.0.0')
define stream apiHealthMonitorAlertStream (api_version string, apiPublisher string, tenantDomain string, msg string, severity int, alertTimestamp long);

@Import('org.wso2.analytics.apim.abnormalResponseTimeAlertStream:1.0.0')
define stream abnormalResponseTimeAlertStream (api string, apiPublisher string, tenantDomain string, resourceTemplate string, method string, responseTime long, responsePercentile double, msg string, severity int, alertTimestamp long);

@Import('org.wso2.analytics.apim.abnormalBackendTimeAlertStream:1.0.0')
define stream abnormalBackendTimeAlertStream (api string, apiPublisher string, tenantDomain string, resourceTemplate string, method string, backendTime long, backendPercentile double, msg string, severity int, alertTimestamp long);

@Import('org.wso2.analytics.apim.tierLimitHittingAlert:1.0.0')
define stream tierLimitHittingAlert (apiPublisher string, api string, applicationId string, applicationName string, tenantDomain string, msg string, severity int, alertTimestamp long);

@Import('org.wso2.analytics.apim.alert.abnormalTierUsageAlert:1.0.0')
define stream abnormalTierUsageAlert (applicationId string, api_version string, tenantDomain string, msg string, severity int, alertTimestamp long);

@Import('org.wso2.analytics.apim.alert.abnormalTokenRefresh:1.0.0')
define stream abnormalTokenRefresh (userId string, tenantDomain string, scope string, timestamp long, alertTimestamp long, msg string, severity int, consumerKey string);

@Import('org.wso2.analytics.apim.alert.unusualIPAccess:1.0.0')
define stream unusualIPAccess (type string, msg string, severity int, ip string, applicationName string, applicationOwner string, userId string, tenantDomain string, requestTime long, alertTimestamp long);

@Import('org.wso2.analytics.apim.requestPatternChangedStream:1.0.0')
define stream requestPatternChangedStream (userId string, applicationName string, applicationOwner string, tenantDomain string, msg string, severity int, alertTimestamp long);

@Import('org.wso2.analytics.apim.abnormalRequestsPerMinAlertStream:1.0.0')
define stream abnormalRequestsPerMinAlert (api string, userId string, tenantDomain string, applicationName string, applicationOwner string,resourceTemplate string, method string, requestsPerMin long, requestsPerMinUpperPercentile double, requestsPerMinLowerPercentile double,
										   reason string, msg string, severity int, alertTimestamp long);
@Export('org.wso2.analytics.apim.emailAlertStream:1.0.0')
define stream emailAlertStream (type string, msg string, alertTimestamp long, emails string);

@from(eventtable = 'analytics.table' , table.name = 'ORG_WSO2_ANALYTICS_APIM_ALERTSTAKEHOLDERINFO' , primary.keys = 'userId,tenantDomain,isSubscriber,isPublisher')
define table stakeholderInfoTable (userId string, alertTypes string, emails	string, isSubscriber bool, isPublisher bool);

@info(name = 'query1')
from abnormalRequestsPerMinAlert["admin@carbon.super" != userId]#window.length(1) join stakeholderInfoTable
on (abnormalRequestsPerMinAlert.userId == stakeholderInfoTable.userId and true == stakeholderInfoTable.isSubscriber )
select 'abnormalRequestsPerMin' as type , abnormalRequestsPerMinAlert.msg, abnormalRequestsPerMinAlert.alertTimestamp, stakeholderInfoTable.emails
having str:contains(stakeholderInfoTable.alertTypes, 'abnormalRequestsPerMin')
insert into emailAlertStream;

@info(name = 'query2')
from requestPatternChangedStream["admin@carbon.super" != userId]#window.length(1) join stakeholderInfoTable
on (requestPatternChangedStream.userId == stakeholderInfoTable.userId and true == stakeholderInfoTable.isSubscriber )
select 'RequestPatternChanged' as type , str:concat(requestPatternChangedStream.msg,  ' by user :',requestPatternChangedStream.userId,' using application : ',requestPatternChangedStream.applicationName, ' owned by: ',requestPatternChangedStream.applicationOwner, '.') as msg, requestPatternChangedStream.alertTimestamp, stakeholderInfoTable.emails
having str:contains(stakeholderInfoTable.alertTypes, 'RequestPatternChanged')
insert into emailAlertStream;

@info(name = 'query3')
from unusualIPAccess["admin@carbon.super" != userId]#window.length(1) join stakeholderInfoTable
on (unusualIPAccess.userId == stakeholderInfoTable.userId and true == stakeholderInfoTable.isSubscriber )
select 'UnusualIPAccessAlert' as type , str:concat("A request from a ", ifThenElse(str:contains(msg, 'old'), 'old','new'), " IP (", ip, ") detected by user:" , unusualIPAccess.userId,  " using application:", applicationName, " owned by ", applicationOwner, ".") as msg, unusualIPAccess.alertTimestamp, stakeholderInfoTable.emails
having  str:contains(stakeholderInfoTable.alertTypes, 'UnusualIPAccessAlert')
insert into emailAlertStream;

@info(name = 'query4')
from abnormalTokenRefresh["admin@carbon.super" != userId]#window.length(1) join stakeholderInfoTable
on (abnormalTokenRefresh.userId == stakeholderInfoTable.userId and true == stakeholderInfoTable.isSubscriber )
select 'AbnormalRefreshAlert' as type , str:concat('Abnormal access token refresh detected by user:',abnormalTokenRefresh.userId,' using consumer key: ', consumerKey, ' at: ', time:dateFormat(timestamp,'yyyy-MM-dd HH:mm:ss'), '.') as msg, abnormalTokenRefresh.alertTimestamp, stakeholderInfoTable.emails
having  str:contains(stakeholderInfoTable.alertTypes, 'AbnormalRefreshAlert')
insert into emailAlertStream;

@info(name = 'query5')
from abnormalTierUsageAlert["admin@carbon.super" != applicationId]#window.length(1) join stakeholderInfoTable
on (abnormalTierUsageAlert.applicationId == stakeholderInfoTable.userId and true == stakeholderInfoTable.isSubscriber )
select  'AbnormalTierUsage' as type , abnormalTierUsageAlert.msg, abnormalTierUsageAlert.alertTimestamp ,stakeholderInfoTable.emails
having str:contains(stakeholderInfoTable.alertTypes, 'AbnormalTierUsage')
insert into emailAlertStream;

@info(name = 'query6')
from tierLimitHittingAlert["admin@carbon.super" != apiPublisher]#window.length(1) join stakeholderInfoTable
on (tierLimitHittingAlert.apiPublisher == stakeholderInfoTable.userId and true == stakeholderInfoTable.isPublisher )
select 'FrequentTierHittingAlert' as type ,
ifThenElse(str:contains(tierLimitHittingAlert.msg, 'Application frequently goes beyond the allocated quota'),str:concat("The application ", tierLimitHittingAlert.applicationName, " owned by ", tierLimitHittingAlert.apiPublisher, " frequently goes beyond the allocated quota when accessing the ", tierLimitHittingAlert.api," API."),
str:concat(tierLimitHittingAlert.msg , " Using the ", tierLimitHittingAlert.applicationName, " application owned by ", tierLimitHittingAlert.apiPublisher, ".")) as msg, tierLimitHittingAlert.alertTimestamp, stakeholderInfoTable.emails
having  str:contains(stakeholderInfoTable.alertTypes, 'FrequentTierHittingAlert')
insert into emailAlertStream;

@info(name = 'query7')
from abnormalResponseTimeAlertStream["admin@carbon.super" != apiPublisher]#window.length(1) join stakeholderInfoTable
on (abnormalResponseTimeAlertStream.apiPublisher == stakeholderInfoTable.userId and true == stakeholderInfoTable.isPublisher )
select 'abnormalResponseTime' as type , str:concat('Abnormal response time detected for http ',abnormalResponseTimeAlertStream.method,' method of resource template:',abnormalResponseTimeAlertStream.resourceTemplate,' in api:',abnormalResponseTimeAlertStream.api,' of tenant domain:',abnormalResponseTimeAlertStream.tenantDomain,', threshold value:',abnormalResponseTimeAlertStream.responsePercentile, 'ms.') as msg, abnormalResponseTimeAlertStream.alertTimestamp, stakeholderInfoTable.emails
having str:contains(stakeholderInfoTable.alertTypes, 'abnormalResponseTime')
insert into emailAlertStream;

@info(name = 'query8')
from abnormalBackendTimeAlertStream["admin@carbon.super" != apiPublisher]#window.length(1) join stakeholderInfoTable
on (abnormalBackendTimeAlertStream.apiPublisher == stakeholderInfoTable.userId and true == stakeholderInfoTable.isPublisher )
select 'abnormalBackendTime' as type , str:concat('Abnormal backend response time detected for http ', abnormalBackendTimeAlertStream.method,' method of resource template:', abnormalBackendTimeAlertStream.resourceTemplate,' in api:',abnormalBackendTimeAlertStream.api,' of tenant domain:',abnormalBackendTimeAlertStream.tenantDomain,', threshold value:',abnormalBackendTimeAlertStream.backendPercentile, 'ms.') as msg, abnormalBackendTimeAlertStream.alertTimestamp, stakeholderInfoTable.emails
having  str:contains(stakeholderInfoTable.alertTypes, 'abnormalBackendTime')
insert into emailAlertStream;

@info(name = 'query9')
from apiHealthMonitorAlertStream["admin@carbon.super" != apiPublisher]#window.length(1) join stakeholderInfoTable
on (apiHealthMonitorAlertStream.apiPublisher == stakeholderInfoTable.userId and true == stakeholderInfoTable.isPublisher )
select 'healthAvailabilityPerMin' as type , apiHealthMonitorAlertStream.msg, apiHealthMonitorAlertStream.alertTimestamp, stakeholderInfoTable.emails
having str:contains(stakeholderInfoTable.alertTypes, 'healthAvailabilityPerMin')
insert into emailAlertStream;

@info(name = 'query10')
from allAlertStream#window.length(1) join stakeholderInfoTable
on ("admin@carbon.super" == stakeholderInfoTable.userId)
select allAlertStream.type , allAlertStream.msg, allAlertStream.alertTimestamp, stakeholderInfoTable.emails
having str:contains(stakeholderInfoTable.alertTypes, allAlertStream.type) and ((type == "FrequentTierHittingAlert" or type == "abnormalResponseTime" or type == "abnormalBackendTime" or type == "healthAvailabilityPerMin") and stakeholderInfoTable.isPublisher  or (type == "abnormalRequestsPerMin" or type == "RequestPatternChanged" or type == "UnusualIPAccessAlert" or type == "AbnormalRefreshAlert" or type == "AbnormalTierUsage") and stakeholderInfoTable.isSubscriber)
insert into emailAlertStream;