<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Analytics>
  <Name>APIM_STAT_SCRIPT</Name>
  <Script>

    <!--create temp table for request summary table in RDBMS-->
    create temporary table APIRequestSummaryData using CarbonJDBC options (dataSource "WSO2AM_STATS_DB", tableName "API_REQUEST_SUMMARY",
    schema "api STRING ,
    api_version STRING ,
    version STRING ,
    apiPublisher STRING ,
    consumerKey STRING ,
    userId STRING ,
    context STRING ,
    max_request_time LONG ,
    total_request_count INTEGER ,
    hostName STRING ,
    year INTEGER ,
    month INTEGER ,
    day INTEGER ,
    time STRING -i",
    primaryKeys "api,api_version,version,apiPublisher,consumerKey,userId,context,hostName,year,month,day"
    );
    <!--create temp table for request stream table-->
    create temporary table APIRequestData USING CarbonAnalytics OPTIONS(tableName "ORG_WSO2_APIMGT_STATISTICS_PERMINUTEREQUEST");

    <!--create table for request summary in DAL-->
    CREATE TEMPORARY TABLE API_REQUEST_SUMMARY_FINAL USING CarbonAnalytics OPTIONS (tableName "API_REQUEST_SUMMARY",
    schema "api string -i,
    api_version string -i,
    version string -i,
    apiPublisher string -i,
    consumerKey string -i,
    userId string -i,
    context string -i,
    max_request_time long -i,
    total_request_count int -i,
    hostName string -i,
    year int -i,
    month int -i,
    day int -i,
    time string -i,
    key_api_facet facet -i,
    key_userId_facet facet -i,
    api_version_userId_facet facet -i,
    api_version_userId_apiPublisher_facet facet -i,
    api_version_userId_context_facet facet -i",
    primaryKeys "api,api_version,version,apiPublisher,consumerKey,userId,context,hostName,year,month,day"
    );

    <!--incrementally processed per month request data table-->
    create temporary table APIMGT_PERDAY_DATA USING CarbonAnalytics OPTIONS(tableName "ORG_WSO2_APIMGT_STATISTICS_PERDAYREQUEST");

    <!--summarised request event and insert into summary table -->
    insert into table API_REQUEST_SUMMARY_FINAL select api, api_version,version, apiPublisher,
    COALESCE(consumerKey,'-'),
    userId,context,
    max(maxRequestTime) as max_request_time,
    sum(total_request_count_per_day) as total_request_count,
    hostName,
    year,
    month,
    day,
    substring(cast(first(requestTime)/1000 as timestamp),0,16),
    facet2(consumerKey,api),
    facet2(consumerKey,userId),
    facet3(api,version,userId),
    facet4(api,version,userId,apiPublisher),
    facet4(api,version,userId,context)
    from APIMGT_PERDAY_DATA
    where context is not NULL
    group by api,api_version,version,apiPublisher,consumerKey,userId,context,hostName,year,month,day;

    <!-- inserting request summary data in DAL to RDBMS-->
    INSERT INTO TABLE APIRequestSummaryData SELECT api,api_version,version,apiPublisher,consumerKey,userId,context,max_request_time,total_request_count,hostName,year,month,day,time FROM API_REQUEST_SUMMARY_FINAL;


    <!--create temp table for API version usage summary table in RDBMS-->
    create temporary table APIVersionUsageSummaryData using CarbonJDBC options (dataSource "WSO2AM_STATS_DB", tableName "API_VERSION_USAGE_SUMMARY",
    schema "api STRING ,
    version STRING ,
    apiPublisher STRING ,
    context STRING ,
    total_request_count INTEGER ,
    hostName STRING ,
    year INTEGER ,
    month INTEGER ,
    day INTEGER ,
    time STRING",
    primaryKeys "api,version,apiPublisher,context,hostName,year,month,day"
    );

    <!--create table for API version usage summary in DAL-->
    CREATE TEMPORARY TABLE API_VERSION_USAGE_SUMMARY_FINAL USING CarbonAnalytics OPTIONS (tableName "API_VERSION_USAGE_SUMMARY",
    schema "api string -i,
    version string -i,
    apiPublisher string -i,
    context string -i,
    total_request_count int -i,
    hostName string -i,
    year int -i,
    month int -i,
    day int -i,
    time string -i,
    max_request_time long -i,
    api_version_context_facet facet -i",
    primaryKeys "api,version,apiPublisher,context,hostName,year,month,day"
    );

    <!--insert API version usage summary -->
    insert into table API_VERSION_USAGE_SUMMARY_FINAL select a.api,a.version,a.apiPublisher,a.context,sum(b.total_request_count_per_day) as total_request_count,a.hostName,a.year,a.month,a.day,
    substring(cast(first(a.requestTime)/1000 as timestamp),0,16),
    max(b.maxRequestTime), facet3(api,version,context)
    from APIRequestData as a, APIMGT_PERDAY_DATA as b
    where a.year=b.year
    and a.month=b.month
    and a.day=b.day
    and a.consumerKey=b.consumerKey
    and a.context=b.context
    and a.api_version=b.api_version
    and a.userId=b.userId
    and a.hostName=b.hostName
    and a.apiPublisher=b.apiPublisher
    and a.resourceTemplate=b.resourceTemplate
    and a.method=b.method
    and a.userAgent=b.userAgent
    and a.clientIp=b.clientIp
    and a.context is not NULL
    group by b.api,b.version,b.apiPublisher,b.context,b.hostName,b.year,b.month,b.day;

    <!-- inserting API version usage summary data in DAL to RDBMS-->
    INSERT INTO TABLE APIVersionUsageSummaryData SELECT api,version,apiPublisher,context,total_request_count,hostName,year,month,day,time FROM API_VERSION_USAGE_SUMMARY_FINAL;


    <!--create temp table for API Resource usage summary table in RDBMS-->
    create temporary table APIResourcePathUsageSummaryData using CarbonJDBC options (dataSource "WSO2AM_STATS_DB", tableName "API_Resource_USAGE_SUMMARY",
    schema "api STRING ,
    version STRING ,
    apiPublisher STRING ,
    consumerKey STRING ,
    resourcePath STRING ,
    context STRING ,
    method STRING ,
    total_request_count INTEGER ,
    hostName STRING ,
    year INTEGER ,
    month INTEGER ,
    day INTEGER ,
    time STRING",
    primaryKeys "api,version,apiPublisher,consumerKey,context,resourcePath,method,hostName,year,month,day"
    );
    <!--create table for API resource usage summary in DAL-->
    CREATE TEMPORARY TABLE API_Resource_USAGE_SUMMARY_FINAL USING CarbonAnalytics OPTIONS (tableName "API_Resource_USAGE_SUMMARY",
    schema "api string -i,
    version string -i,
    apiPublisher string -i,
    consumerKey string -i,
    resourcePath string -i,
    context string -i,
    method string -i,
    total_request_count int -i,
    hostName string -i,
    year int -i,
    month int -i,
    day int -i,
    time string -i,
    max_request_time long -i,
    key_api_method_path_facet facet -i,
    api_version_context_method_facet facet -i",
    primaryKeys "api,version,apiPublisher,consumerKey,context,resourcePath,method,hostName,year,month,day"
    );

    <!--inserting API resource usage summary data-->
    insert into table API_Resource_USAGE_SUMMARY_FINAL select
    a.api,a.version,a.apiPublisher,COALESCE(a.consumerKey,'-'),
    a.resourceTemplate,a.context,a.method,sum(b.total_request_count_per_day) as total_request_count,a.hostName,
    a.year,a.month,a.day,
    substring(cast(first(a.requestTime)/1000 as timestamp),0,16),
    max(b.maxRequestTime),
    facet4(a.consumerKey,a.api,a.method,a.resourceTemplate),
    facet5(a.api,a.version,a.context,a.method,a.resourceTemplate)
    from APIRequestData as a, APIMGT_PERDAY_DATA as b
    where a.year=b.year
    and a.month=b.month
    and a.day=b.day
    and a.consumerKey=b.consumerKey
    and a.context=b.context
    and a.api_version=b.api_version
    and a.userId=b.userId
    and a.hostName=b.hostName
    and a.apiPublisher=b.apiPublisher
    and a.resourceTemplate=b.resourceTemplate
    and a.method=b.method
    and a.userAgent=b.userAgent
    and a.clientIp=b.clientIp
    and a.context is not NULL
    group by b.api,b.version,b.apiPublisher,b.consumerKey,b.resourceTemplate,b.context,b.method,b.hostName,b.year,b.month,b.day;

    <!-- inserting API resource usage summary data in DAL to RDBMS-->
    INSERT INTO TABLE APIResourcePathUsageSummaryData SELECT api,version,apiPublisher,consumerKey,resourcePath,context,method,total_request_count,hostName,year,month,day,time FROM API_Resource_USAGE_SUMMARY_FINAL;


    <!--create temp table for API Response summary table in RDBMS-->
    create temporary table APIResponseSummaryData using CarbonJDBC options (dataSource "WSO2AM_STATS_DB", tableName "API_RESPONSE_SUMMARY",
    schema "api_version STRING ,
    apiPublisher STRING ,
    context STRING ,
    serviceTime INTEGER ,
    total_response_count INTEGER ,
    hostName STRING ,
    year INTEGER ,
    month INTEGER ,
    day INTEGER ,
    time STRING",
    primaryKeys "api_version,apiPublisher,context,hostName,year,month,day"
    );
    <!--create temp table for Response event stream data-->
    create temporary table APIResponseData USING CarbonAnalytics OPTIONS(tableName "ORG_WSO2_APIMGT_STATISTICS_PERMINUTERESPONSE");

    <!--create table for Response summary in DAL-->
    CREATE TEMPORARY TABLE API_RESPONSE_SUMMARY_FINAL USING CarbonAnalytics OPTIONS (tableName "API_RESPONSE_SUMMARY",
    schema "api_version string -i,
    apiPublisher string -i,
    context string -i,
    serviceTime int -i,
    total_response_count int -i,
    hostName string -i,
    year int -i,
    month int -i,
    day int -i,
    time string -i,
    max_request_time long -i,
    api_version_context_facet facet -i",
    primaryKeys "api_version,apiPublisher,context,hostName,year,month,day"
    );

    <!--inserting API Response usage summary data-->
    insert into table API_RESPONSE_SUMMARY_FINAL select
    api_version, COALESCE(apiPublisher,''),
    context, sum(serviceTime) as avg_service_time,
    sum(total_response_count) as total_response_count, hostName,
    year,month,day,
    substring(cast(first(eventTime)/1000 as timestamp),0,16),
    max(eventTime), facet2(api_version,context)
    from APIResponseData where
    context is not NULL group by api_version,apiPublisher,context,hostName,year,month,day;

    <!-- inserting response summary data in DAL to RDBMS-->
    INSERT INTO TABLE APIResponseSummaryData SELECT api_version,apiPublisher,context,serviceTime,total_response_count,hostName,year,month,day,time FROM API_RESPONSE_SUMMARY_FINAL;


    <!--create temp table for API Fault summary table in RDBMS-->
    create temporary table APIFaultSummaryData using CarbonJDBC options (dataSource "WSO2AM_STATS_DB", tableName "API_FAULT_SUMMARY",
    schema "api STRING ,
    version STRING ,
    apiPublisher STRING ,
    consumerKey STRING ,
    context STRING ,
    total_fault_count INTEGER ,
    hostName STRING ,
    year INTEGER ,
    month INTEGER ,
    day INTEGER ,
    time STRING",
    primaryKeys "api,version,apiPublisher,consumerKey,context,hostName,year,month,day"
    );
    <!--create temp table for Fault event stream data-->
    create temporary table APIFaultData USING CarbonAnalytics OPTIONS(tableName "ORG_WSO2_APIMGT_STATISTICS_FAULT");

    <!--create table for Fault summary in DAL-->
    CREATE TEMPORARY TABLE API_FAULT_SUMMARY_FINAL USING CarbonAnalytics OPTIONS (tableName "API_FAULT_SUMMARY",
    schema "api string -i,
    version string -i,
    apiPublisher string -i,
    consumerKey string -i,
    context string -i,
    total_fault_count int -i,
    hostName string -i,
    year int -i,
    month int -i,
    day int -i,
    time string -i,
    max_request_time long -i,
    consumerKey_api_facet facet -i,
    api_version_apiPublisher_context_facet facet -i",
    primaryKeys "api,version,apiPublisher,consumerKey,context,hostName,year,month,day"
    );

    <!--inserting API Fault summary data-->
    insert into table API_FAULT_SUMMARY_FINAL select
    api,version,apiPublisher,COALESCE(consumerKey,'-'),context,
    count(errorMessage) as total_fault_count,
    hostName,
    substring(cast(first(requestTime)/1000 as timestamp),0,4),
    substring(cast(first(requestTime)/1000 as timestamp),6,2),
    substring(cast(first(requestTime)/1000 as timestamp),9,2),
    substring(cast(first(requestTime)/1000 as timestamp),0,16),
    max(requestTime),
    facet2(consumerKey,api),
    facet4(api,version,apiPublisher,context)
    from APIFaultData where
    context is not NULL group by api,version,apiPublisher,consumerKey ,context,hostName,
    substring(cast(requestTime/1000 as timestamp),0,4),
    substring(cast(requestTime/1000 as timestamp),6,2),
    substring(cast(requestTime/1000 as timestamp),9,2);

    <!-- inserting fault summary data in DAL to RDBMS-->
    INSERT INTO TABLE APIFaultSummaryData SELECT api,version,apiPublisher,consumerKey,context,total_fault_count,hostName,year,month,day,time FROM API_FAULT_SUMMARY_FINAL;


    <!--create temp table for API Destination summary table in RDBMS-->
    create temporary table APIDestinationDataSummaryData using CarbonJDBC options (dataSource "WSO2AM_STATS_DB", tableName "API_DESTINATION_SUMMARY",
    schema "api STRING ,
    version STRING ,
    apiPublisher STRING ,
    context STRING ,
    destination STRING ,
    total_request_count INTEGER ,
    hostName STRING ,
    year INTEGER ,
    month INTEGER ,
    day INTEGER ,
    time STRING",
    primaryKeys "api,version,apiPublisher,context,destination,hostName,year,month,day"
    );
    <!--create table for destination summary in DAL-->
    CREATE TEMPORARY TABLE API_DESTINATION_SUMMARY_FINAL USING CarbonAnalytics OPTIONS (tableName "API_DESTINATION_SUMMARY",
    schema "api string -i,
    version string -i,
    apiPublisher string -i,
    context string -i,
    destination string -i,
    total_request_count int -i,
    hostName string -i,
    year int -i,
    month int -i,
    day int -i,
    time string -i,
    max_request_time long -i,
    api_version_context_dest_facet facet -i",
    primaryKeys "api,version,apiPublisher,context,destination,hostName,year,month,day"
    );

    <!--inserting API Destination usage summary data-->
    insert into table API_DESTINATION_SUMMARY_FINAL select
    api,version,apiPublisher, context, COALESCE(destination,'-'), sum(total_response_count) as total_request_count,hostName,year,month,day,
    substring(cast(first(eventTime)/1000 as timestamp),0,16),
    max(eventTime),
    facet4(api,version,context,COALESCE(destination,'-'))
    from APIResponseData
    where context is not NULL group by api,version,apiPublisher,context,destination,hostName,year,month,day;

    <!-- inserting API destination summary data in DAL to RDBMS-->
    INSERT INTO TABLE APIDestinationDataSummaryData SELECT api,version,apiPublisher,context,destination,total_request_count,hostName,year,month,day,time
    FROM API_DESTINATION_SUMMARY_FINAL where destination !='';

  </Script>
  <CronExpression>0 0/5 * 1/1 * ? *</CronExpression>
</Analytics>
